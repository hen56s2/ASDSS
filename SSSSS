local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")

local WEBHOOK_CONFIG = _G.WEBHOOK_CONFIG or {
	url = "",
	everyone = false,
	hop = false,
	hop_timer = 300
}

local function sendWebhookAlert()
	if not WEBHOOK_CONFIG.url or WEBHOOK_CONFIG.url == "" then return end

	local rifts = workspace:FindFirstChild("Rendered") and workspace.Rendered:FindFirstChild("Rifts")
	if not rifts then return end

	local egg = rifts:FindFirstChild("bruh-egg")
	if not egg then return end

	local placeId = game.PlaceId
	local jobId = game.JobId
	local joinLink = "https://www.roblox.com/games/start?placeId=" .. placeId .. "&gameInstanceId=" .. jobId

	local timeLeft = "Unknown"
	if egg:FindFirstChild("Display") then
		local gui = egg.Display:FindFirstChild("SurfaceGui")
		if gui and gui:FindFirstChild("Timer") and gui.Timer:IsA("TextLabel") then
			timeLeft = gui.Timer.Text
		end
	end

	local distanceInfo = "Unknown"
	local player = Players.LocalPlayer
	if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") and egg.PrimaryPart then
		local playerY = player.Character.HumanoidRootPart.Position.Y
		local eggY = egg.PrimaryPart.Position.Y
		local diff = math.floor(math.abs(playerY - eggY))
		distanceInfo = playerY > eggY and (diff .. "m below") or (diff .. "m above")
	end

	local content = WEBHOOK_CONFIG.everyone and "@everyone" or ""

	local embed = {
		title = "ü•ö BRUH EGG FOUND!",
		description =
			"**‚è±Ô∏è Time Left:** " .. timeLeft .. "\n" ..
			"**üìè Distance:** " .. distanceInfo .. "\n" ..
			"**üåç Place ID:** `" .. placeId .. "`\n" ..
			"**üÜî Job ID:** `" .. jobId .. "`\n" ..
			"**üîó [Click to Join Server](" .. joinLink .. ")**",
		color = 0x00ffcc
	}

	local payload = {
		content = content,
		embeds = { embed }
	}

	pcall(function()
		local req = (syn and syn.request) or (http and http.request) or (http_request) or (request)
		if req then
			req({
				Url = WEBHOOK_CONFIG.url,
				Method = "POST",
				Headers = {["Content-Type"] = "application/json"},
				Body = HttpService:JSONEncode(payload)
			})
		end
	end)

	if WEBHOOK_CONFIG.hop then
		task.delay(WEBHOOK_CONFIG.hop_timer or 300, function()
			local PlaceID = game.PlaceId
			local AllIDs = {}
			local foundAnything = ""
			local actualHour = os.date("!*t").hour

			pcall(function()
				AllIDs = HttpService:JSONDecode(readfile("NotSameServers.json"))
			end)

			if type(AllIDs) ~= "table" then
				AllIDs = { actualHour }
				writefile("NotSameServers.json", HttpService:JSONEncode(AllIDs))
			end

			local function TPReturner()
				local Site
				if foundAnything == "" then
					Site = HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
				else
					Site = HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
				end
				if Site.nextPageCursor then foundAnything = Site.nextPageCursor end

				for _,v in pairs(Site.data) do
					local id = tostring(v.id)
					local isNew = true
					if v.playing < v.maxPlayers then
						for _, oldId in ipairs(AllIDs) do
							if id == tostring(oldId) then
								isNew = false
								break
							end
						end
						if isNew then
							table.insert(AllIDs, id)
							writefile("NotSameServers.json", HttpService:JSONEncode(AllIDs))
							TeleportService:TeleportToPlaceInstance(PlaceID, id, Players.LocalPlayer)
							wait(4)
							break
						end
					end
				end
			end

			while true do
				pcall(TPReturner)
				wait(1)
			end
		end)
	end
end

sendWebhookAlert()
